using System;
using System.Collections.Generic;
using Com.CodeGame.CodeTanks2012.DevKit.CSharpCgdk.Model;
using System.IO;

namespace Com.CodeGame.CodeTanks2012.DevKit.CSharpCgdk
{
	public sealed class MyStrategy : IStrategy
	{
		ActualStrategy strat;
		public TankType SelectTank(int tankIndex, int teamSize)
		{
#if TEDDY_BEARS
			ActualStrategy.file = new StreamWriter("output.txt");
			ActualStrategy.file.AutoFlush = true;
			/*realFile = new StreamWriter("real.txt");
			realFile.AutoFlush = true;
			teorFile = new StreamWriter("teor.txt");
			teorFile.AutoFlush = true;*/
			System.Threading.Thread.CurrentThread.CurrentCulture 
				= System.Globalization.CultureInfo.InvariantCulture;
#endif
			if (teamSize == 1)
				strat = new OneTankActualStrategy();
			else
				strat = new TwoTankskActualStrategy();
			return TankType.Medium;
		}
		public void Move(Tank self, World world, Move move)
		{
			strat.Move(self, world, move);
		}
	}
}

class EscapePlan
{
	public double leftTrackPower, rightTrackPower;
	public double[] angle, speedX, speedY;
	public static List<EscapePlan> ar = new List<EscapePlan>();
	static EscapePlan()
	{
		EscapePlan.ar.Add(new EscapePlan()
		{
			leftTrackPower = 1.000000000,
			rightTrackPower = 0.000000000,
			angle = new double[] { 0.000000000, 0.000408769, 0.001227736, 0.002448559, 0.004062891, 0.006062627, 0.008440018, 0.011187196, 0.014296651, 0.017760873, 0.021572590, 0.025724769, 0.030210257, 0.035022378, 0.040154338, 0.045599580, 0.051351786, 0.057404518, 0.063751698, 0.070387244, 0.077305317, 0.084500074, 0.091965795, 0.099696994, 0.107688189, 0.115934014, 0.124429226, 0.133168817, 0.142147660, 0.151360989, 0.160803914, 0.170471668, 0.180359721, 0.190463543, 0.200778723, 0.211300850, 0.222025752, 0.232949257, 0.244067192, 0.255375743, 0.266870856, 0.278548777, 0.290405691, 0.302437961, 0.314642012, 0.327014327, 0.339551449, 0.352249980, 0.365106583, 0.378118038, 0.391281188, 0.404592931, 0.418050170, 0.431649983, 0.445389390, 0.459265530, 0.473275602, 0.487416923, 0.501686752, 0.516082406, 0.530601382, 0.545241117, 0.559999108, 0.574872971, 0.589860320, 0.604958832, 0.620166183, 0.635480165, 0.650898635, 0.666419387, 0.682040334, 0.697759449, 0.713574708, 0.729484141, 0.745485783, 0.761577785, 0.777758300, 0.794025481, 0.810377568, 0.826812804, 0.843329489, 0.859925956, 0.876600564, 0.893351734, 0.910177857, 0.927077413, 0.944048911, 0.961090863, 0.978201807, 0.995380342, 1.012625098, 1.029934689, 1.047307789, 1.064743116, 1.082239375, 1.099795327, 1.117409736, 1.135081410, 1.152809173, 1.170591876, 1.188428387, 1.206317611, 1.224258460, 1.242249878, 1.260290828, 1.278380292, 1.296517275, 1.314700805, 1.332929924, 1.351203695, 1.369521201, 1.387881555, 1.406283870, 1.424727291, 1.443210959, 1.461734071, 1.480295807, 1.498895362, 1.517531991, 1.536204904, 1.554913372, 1.573656648, 1.592434049, 1.611244857, 1.630088389, 1.648963958, 1.667870939, 1.686808646, 1.705776483, 1.724773824, 1.743800044, 1.762854576, 1.781936824, 1.801046252, 1.820182264, 1.839344323, 1.858531892, 1.877744496, 1.896981537, 1.916242599, 1.935527146, 1.954834700, 1.974164784, 1.993516922, 2.012890697, 2.032285631, 2.051701307, 2.071137309, 2.090593159, 2.110068500, 2.129562974, 2.149076104, 2.168607593, 2.188157022, 2.207724035, 2.227308214, 2.246909261, 2.266526818, 2.286160588, 2.305810213, 2.325475335, 2.345155597, 2.364850760, 2.384560466, 2.404284477, 2.424022555, 2.443774343, 2.463539481, 2.483317733, 2.503108859, 2.522912621, 2.542728782, 2.562556982, 2.582397103, 2.602248788, 2.622111917, 2.641986132, 2.661871314, 2.681767106, 2.701673388, 2.721589923, 2.741516471, 2.761452913, 2.781399012, 2.801354527, 2.821319222, 2.841292977, 2.861275673, 2.881266952, 2.901266813, 2.921275020, 2.941291332, 2.961315632, 2.981347799, 3.001387596, 3.021434903, 3.041489601, 3.061551452, 3.081620455, 3.101696372, },
			speedX = new double[] { 0.000000050, 0.098958392, 0.192968796, 0.282278625, 0.367122724, 0.447724118, 0.524294436, 0.597034524, 0.666134931, 0.731776405, 0.794130314, 0.853359115, 0.909616801, 0.963049125, 1.013794323, 1.061983144, 1.107739425, 1.151180382, 1.192416754, 1.231553280, 1.268689028, 1.303917442, 1.337326827, 1.369000659, 1.399017612, 1.427451729, 1.454373280, 1.479847819, 1.503937567, 1.526700976, 1.548192808, 1.568464822, 1.587565426, 1.605540408, 1.622432224, 1.638281027, 1.653124425, 1.666997341, 1.679932955, 1.691961902, 1.703112851, 1.713412470, 1.722885843, 1.731556313, 1.739445540, 1.746573498, 1.752958841, 1.758619183, 1.763570314, 1.767827386, 1.771404046, 1.774313003, 1.776566122, 1.778174110, 1.779146933, 1.779493938, 1.779223386, 1.778343128, 1.776860206, 1.774781130, 1.772111962, 1.768858151, 1.765024887, 1.760616675, 1.755637747, 1.750092010, 1.743983217, 1.737314561, 1.730089197, 1.722310035, 1.713979791, 1.705100980, 1.695676083, 1.685707417, 1.675197303, 1.664147899, 1.652561488, 1.640439993, 1.627785900, 1.614601134, 1.600888059, 1.586648925, 1.571886096, 1.556602103, 1.540799478, 1.524480871, 1.507649051, 1.490307032, 1.472457787, 1.454104604, 1.435250901, 1.415900212, 1.396056388, 1.375723287, 1.354905078, 1.333606099, 1.311830982, 1.289584459, 1.266871465, 1.243697196, 1.220067179, 1.195986966, 1.171462509, 1.146499938, 1.121105622, 1.095286047, 1.069048121, 1.042398840, 1.015345575, 0.987895798, 0.960057300, 0.931838070, 0.903246352, 0.874290622, 0.844979512, 0.815321953, 0.785327101, 0.755004335, 0.724363200, 0.693413475, 0.662165230, 0.630628632, 0.598814138, 0.566732348, 0.534394082, 0.501810383, 0.468992418, 0.435951560, 0.402699306, 0.369247458, 0.335607877, 0.301792610, 0.267813853, 0.233683932, 0.199415409, 0.165020808, 0.130512974, 0.095904749, 0.061209159, 0.026439278, -0.008391650, -0.043270299, -0.078183263, -0.113117158, -0.148058249, -0.182993045, -0.217907795, -0.252788697, -0.287621998, -0.322393925, -0.357090454, -0.391697763, -0.426201941, -0.460589037, -0.494845108, -0.528956197, -0.562908289, -0.596687602, -0.630280211, -0.663672165, -0.696849799, -0.729799082, -0.762506600, -0.794958345, -0.827140908, -0.859040811, -0.890644540, -0.921938668, -0.952910052, -0.983545355, -1.013831728, -1.043755927, -1.073305434, -1.102467376, -1.131229166, -1.159578463, -1.187503011, -1.214990642, -1.242029371, -1.268607520, -1.294713318, -1.320335214, -1.345462190, -1.370083030, -1.394186882, -1.417763143, -1.440801191, -1.463290955, -1.485222203, -1.506585233, -1.527370363, -1.547568172, -1.567169580, -1.586165734, -1.604547954, -1.622307908, -1.639437355, -1.655928389, -1.671773548, -1.686965360, },
			speedY = new double[] { 0.000000055, 0.000000048, 0.000040499, 0.000159965, 0.000394275, 0.000776622, 0.001337731, 0.002106051, 0.003107788, 0.004367114, 0.005906244, 0.007745530, 0.009903631, 0.012397577, 0.015242744, 0.018453161, 0.022041427, 0.026018790, 0.030395397, 0.035180114, 0.040380723, 0.046004072, 0.052055924, 0.058541091, 0.065463530, 0.072826448, 0.080632076, 0.088882056, 0.097577179, 0.106717687, 0.116303112, 0.126332334, 0.136803747, 0.147715040, 0.159063478, 0.170845785, 0.183058217, 0.195696541, 0.208756071, 0.222231654, 0.236117821, 0.250408666, 0.265097913, 0.280178833, 0.295644426, 0.311487423, 0.327700167, 0.344274663, 0.361202622, 0.378475423, 0.396084315, 0.414020112, 0.432273490, 0.450834825, 0.469694258, 0.488841656, 0.508266829, 0.527959118, 0.547907847, 0.568101910, 0.588530475, 0.609182035, 0.630045098, 0.651108121, 0.672359113, 0.693786320, 0.715377500, 0.737120324, 0.759002338, 0.781011168, 0.803134233, 0.825358747, 0.847671805, 0.870060418, 0.892511595, 0.915012264, 0.937549314, 0.960109347, 0.982679054, 1.005245037, 1.027794025, 1.050312385, 1.072786846, 1.095203819, 1.117549715, 1.139810908, 1.161974133, 1.184025649, 1.205951997, 1.227739881, 1.249375568, 1.270845686, 1.292137033, 1.313236002, 1.334129556, 1.354804338, 1.375247299, 1.395445493, 1.415385773, 1.435055182, 1.454441188, 1.473531120, 1.492312314, 1.510772450, 1.528899132, 1.546680329, 1.564103877, 1.581157983, 1.597831004, 1.614111398, 1.629987790, 1.645449009, 1.660484069, 1.675082181, 1.689232638, 1.702925039, 1.716149179, 1.728895185, 1.741153128, 1.752913409, 1.764166868, 1.774904316, 1.785117006, 1.794796279, 1.803933808, 1.812521593, 1.820551730, 1.828016653, 1.834908884, 1.841221655, 1.846948176, 1.852081866, 1.856616631, 1.860546469, 1.863865969, 1.866569601, 1.868652532, 1.870109932, 1.870937443, 1.871130962, 1.870686730, 1.869601231, 1.867871322, 1.865493999, 1.862466952, 1.858787942, 1.854454919, 1.849466215, 1.843820845, 1.837517683, 1.830556192, 1.822936029, 1.814657360, 1.805720469, 1.796126044, 1.785875033, 1.774968768, 1.763408919, 1.751197378, 1.738336563, 1.724829247, 1.710678090, 1.695886342, 1.680457870, 1.664396327, 1.647706011, 1.630391342, 1.612457302, 1.593908827, 1.574751459, 1.554990893, 1.534633233, 1.513684812, 1.492152251, 1.470042526, 1.447362691, 1.424120362, 1.400323311, 1.375979573, 1.351097475, 1.325685650, 1.299752866, 1.273308326, 1.246361435, 1.218921715, 1.190999165, 1.162603843, 1.133746183, 1.104436700, 1.074686341, 1.044505994, 1.013906996, 0.982900856, 0.951499222, 0.919714030, 0.887557389, 0.855041541, 0.822178930, 0.788982291, 0.755464386, }
		});
	}
}

class Point
{
	public double x, y;
	public Point(double x = 0, double y = 0)
	{
		this.x = x;
		this.y = y;
	}
	public Point(Unit unit)
	{
		this.x = unit.X;
		this.y = unit.Y;
	}
	static public Point operator -(Point a, Point b)
	{
		return new Point(a.x - b.x, a.y - b.y);
	}
	static public Point operator +(Point a, Point b)
	{
		return new Point(a.x + b.x, a.y + b.y);
	}
	static public double wp(Point a, Point b)
	{
		return a.x * b.y - a.y * b.x;
	}
	static public double wp(Point a, Point b, Point c)
	{
		return wp(b - a, c - a);
	}
	static public double scalar(Point a, Point b)
	{
		return a.x * b.x + a.y * b.y;
	}
	static public double Atan2(Point a)
	{
		return Math.Atan2(a.y, a.x);
	}
	static public bool Intersect(Point a, Point b, Point c, Point d)
	{
		return Intersect(a.x, b.x, c.x, d.x) && Intersect(a.y, b.y, c.y, d.y) &&
			wp(a, b, c) * wp(a, b, d) <= 0 && wp(c, d, b) * wp(c, d, a) <= 0;
	}
	static bool Intersect(double l1, double r1, double l2, double r2)
	{
		if (l1 > r1)
			Util.Swap(ref l1, ref r1);
		if (l2 > r2)
			Util.Swap(ref l2, ref r2);
		return Math.Max(l1, l2) <= Math.Min(r1, r2);
	}
}

class Util
{
	static public void Swap<T>(ref T a, ref T b)
	{
		T tmp = a;
		a = b;
		b = tmp;
	}
	static public double Sqr(double a)
	{
		return a * a;
	}
}